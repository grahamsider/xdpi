#!/bin/sh

set -eCu

VERSION="0.2.1"

OPTS=":hclvn:d:s:"

export DISPLAY=":$(find /tmp/.X11-unix/* -type s | sed "s#/tmp/.X11-unix/X##")"

ARG_LIST=0
ARG_CURR=0
ARG_NEW=0
ARG_DEL=0
ARG_SWITCH=0
ARG_VER=0

# Set this to hardcode a cpp preprocessor path for xrdb merge
# (ie xrdb -merge -cpp $XRDB_CPP ...)
XRDB_CPP=${XRDB_CPP:-""}

PROC_LIST="i3 bspwm sway polybar"

DIFF_IN_PATH="/tmp/input.xdpi"
DIFF_OUT_PATH="/tmp/output.xdpi"

XDPI_DIR="$XDG_CONFIG_HOME/xdpi"
XDPI_CONF_DIR="$XDPI_DIR/configs"
XDPI_DIFF_DIR="$XDPI_DIR/diffs"

XRES_PATH="$HOME/.Xresources"
XRES_INCL="#include \"$XDPI_DIR/x.dpi\""

CONF_CURR_NAME=""
CONF_CURR_PATH="$XDPI_DIR/x.dpi"

CONF_SWITCH_NAME=""
CONF_SWITCH_DIR=""

CONF_NEW_NAME=""
CONF_NEW_DIR=""

CONF_DEL_NAME=""
CONF_DEL_DIR=""

# Ensure tmp file cleanup
trap int_handler  INT
trap exit_handler EXIT

int_handler() {
    cleanup
    exit 1
}

exit_handler() {
    EXIT_STATUS="$?"
    cleanup
    exit $EXIT_STATUS
}

cleanup() {
    if [ -f   "$DIFF_IN_PATH" ]; then
        rm -f "$DIFF_IN_PATH"
    fi
    if [ -f   "$DIFF_OUT_PATH" ]; then
        rm -f "$DIFF_OUT_PATH"
    fi
}

usage() {
    echo "Usage: ./xdpi [options]
      -l (list):       list configs
      -c (current):    display current config
      -n (new):        create a new config
      -d (delete):     delete specified config
      -s (switch):     switch to specified config
      -v (version):    show xdpi version and exit
      -h (help):       show usage"
}

parse_args() {
    # Parse loop
    while getopts "$OPTS" opt; do
        case "$opt" in
            l)
                ARG_LIST=1
                ;;
            c)
                ARG_CURR=1
                ;;
            s)
                ARG_SWITCH=1
                CONF_SWITCH_NAME="$OPTARG"
                ;;
            n)
                ARG_NEW=1
                CONF_NEW_NAME="$OPTARG"
                ;;
            d)
                ARG_DEL=1
                CONF_DEL_NAME="$OPTARG"
                ;;
            v)
                ARG_VER=1
                ;;
            \?|h)
                usage
                exit 0
                ;;
            :)
                case "$OPTARG" in
                    s)
                        echo "error: no configuration specified for option '-s'"
                        exit 1
                        ;;
                    n)
                        echo "error: no configuration specified for option '-n'"
                        exit 1
                        ;;
                    d)
                        echo "error: no configuration specified for option '-d'"
                        exit 1
                        ;;
                esac
                ;;
         esac
    done
    [ "$OPTIND" -eq "1" ] && usage && exit 0
    shift $((OPTIND - 1));
}

exec_args() {
    if   [ "$ARG_VER"  -eq 1 ]; then
        echo "xdpi $VERSION"
    elif [ "$ARG_CURR" -eq 1 ]; then
        get_curr_conf
    elif [ "$ARG_LIST" -eq 1 ]; then
        list_confs
    elif [ "$ARG_NEW"  -eq 1 ]; then
        check_new_conf
        create_conf
    elif [ "$ARG_DEL"  -eq 1 ]; then
        check_del_conf
        delete_conf
    elif [ "$ARG_SWITCH" -eq 1 ]; then
        check_switch_conf
        copy_conf
        exec_script
        rel_xres
        loop_diffs
        loop_procs
    fi
}

get_curr_conf() {
    if ! [ -f "$CONF_CURR_PATH" ]; then
        echo "error: no xdpi config in use!"
    else
        CONF_CURR_NAME=$(grep "! Current config: .*$" "$CONF_CURR_PATH" | sed "s/^.*: //") > /dev/null
        echo "$CONF_CURR_NAME"
    fi
}

list_confs() {
    if ! [ "$(find "$XDPI_CONF_DIR"/* -maxdepth 0 -type d 2> /dev/null)" ]; then
        echo "no configs made!"
    else
        find "$XDPI_CONF_DIR"/* -maxdepth 0 -type d | sed "s/^.*\///; s/.dpi//"
    fi
}

create_conf() {
    mkdir -p "$CONF_NEW_DIR"
    echo             > "$CONF_NEW_DIR/$CONF_NEW_NAME.dpi"
    echo "#!/bin/sh" > "$CONF_NEW_DIR/$CONF_NEW_NAME.sh"
    chmod +x "$CONF_NEW_DIR/$CONF_NEW_NAME.sh"
    if ! [ -d "$XDPI_DIFF_DIR" ]; then
        mkdir "$XDPI_DIFF_DIR"
    fi
}

delete_conf() {
    # TODO: Make this actually do something
    echo "warning: this will delete everything in $CONF_DEL_DIR"
    while true; do
        printf "are you sure you want to delete this configuration? [y/n] "
        read -r del_confirm
        case "$del_confirm" in
            y)
                break
                ;;
            n)
                exit 0
                ;;
            *)
                echo "error: please enter y or n"
                ;;
        esac
    done
}

check_new_conf() {
    CONF_NEW_DIR="$XDPI_CONF_DIR/$CONF_NEW_NAME"
    if [ -d "$CONF_NEW_DIR" ]; then 
        echo "error: configuration '$CONF_NEW_DIR' already exists" 
        exit 1
    fi
}

check_del_conf() {
    CONF_DEL_DIR="$XDPI_CONF_DIR/$CONF_DEL_NAME"
    if ! [ -d "$CONF_DEL_DIR" ]; then
        echo "error: configuration '$CONF_DEL_DIR' does not exist" 
        exit 1
    fi
}

check_switch_conf() {
    CONF_SWITCH_DIR="$XDPI_CONF_DIR/$CONF_SWITCH_NAME"
    if ! [ -d "$CONF_SWITCH_DIR" ]; then
        echo "error: configuration '$CONF_SWITCH_DIR' does not exist" 
        exit 1
    fi
}

copy_conf() {
    rm -f "$CONF_CURR_PATH"
    echo "! Current config: $CONF_SWITCH_NAME"    > "$CONF_CURR_PATH"
    echo                                         >> "$CONF_CURR_PATH"
    cat "$CONF_SWITCH_DIR/$CONF_SWITCH_NAME.dpi" >> "$CONF_CURR_PATH"
}

exec_script() {
    # Run user config script, don't exit on error
    echo "info: executing $CONF_SWITCH_NAME.sh"
    if [ -f "$CONF_SWITCH_DIR/$CONF_SWITCH_NAME.sh" ]; then
        set +e
        "$CONF_SWITCH_DIR/$CONF_SWITCH_NAME.sh" || \
            echo "warning: user script '$CONF_SWITCH_NAME.sh' exits with error code $?"
        set -e
    fi
    echo "info: script execution completed"
}

loop_procs() {
    # If PID exists, reload
    echo "info: reloading procs"
    for proc in $PROC_LIST; do
        rel_if_alive "$proc"
    done
}

loop_diffs() {
    # Edit specified configs
    for diff in "$XDPI_DIFF_DIR"/*.diff; do
        # Detect nullglob
        if [ "$diff" = "$XDPI_DIFF_DIR"'/*.diff' -a ! -e "$XDPI_DIFF_DIR"'/*.diff' ]; then
            echo "info: no diffs detected"
            continue
        fi
        edit_conf "$diff"
    done
}

edit_conf() {
    echo "info: applying $(echo "$diff" | sed 's/^.*\///')"
    # Get config path to edit
    conf_path=$(grep "#" "$*" | sed "s/#\s*//")

    # Check config path
    if   [ -z "$conf_path" ]; then
        # FIXME: When no diffs in diff folder, this gets echoed for some reason
        echo "error: no path specified in '$(echo "$*" | sed "s/^.*\///")'"
        echo "skipping..."
        return 1
    fi
    if ! [ -f "$conf_path" ]; then
        echo "error: path '$conf_path' does not exist"
        echo "skipping..."
        return 1
    fi

    # Generate config backup
    cp "$conf_path" "$conf_path.xdpi.bak"

    # Store < input in /tmp
    grep "<" "$*" | sed "s/<\s*//" > $DIFF_IN_PATH

    # Store > output in /tmp (both global and config specific)
    sed -n "/---\s*\^\s*\*/,/---\s*\$\s*\*/p" "$*" | grep ">" | sed "s/>\s*//" > $DIFF_OUT_PATH
    sed -n "/---\s*\^\s*$CONF_SWITCH_NAME/,/---\s*\$\s*$CONF_SWITCH_NAME/p" "$*" | grep ">" | sed "s/>\s*//" >> $DIFF_OUT_PATH

    build_sedcmd

    # Edit config
    sed -i "$sedcmd" "$conf_path"

    cleanup
}

build_sedcmd() {
    # Clean any previous sedcmd
    sedcmd=""

    # Build sedcmd
    while read -r input; do

        # Check for matching pair
        if ! grep -q "$input" "$DIFF_OUT_PATH"; then 
            echo "warning: '$input' has no matching expression" && continue
        fi

        # Store output and append sedcmd
        output=$(grep "$input" "$DIFF_OUT_PATH")
        sedcmd="$sedcmd s/$input/$output/g ;"

    done < $DIFF_IN_PATH

    # Remove last semi-colon
    sedcmd=$(echo "$sedcmd" | sed "s/;$//")
}

check_xres() {
    # Create .Xresources if not already there
    if ! [ -f "$XRES_PATH" ]; then
        touch "$XRES_PATH"
    fi

    # Add x.dpi include path to xres if not already there
    if ! grep -q "$XRES_INCL" "$XRES_PATH"; then
        echo "$XRES_INCL" | cat - "$XRES_PATH" > /tmp/xres.xdpi
        mv /tmp/xres.xdpi "$XRES_PATH"
    fi
}

# XRDB reload
rel_xres() {
    if [ -z "$XRDB_CPP" ]; then
        xrdb -merge "$XRES_PATH" > /dev/null
    else
        xrdb -merge -cpp "${XRDB_CPP:-"default"}" "$XRES_PATH" > /dev/null
    fi
}

# Process reloads
rel_i3() {
    i3-msg restart > /dev/null
}

rel_sway() {
    swaymsg reload > /dev/null
}

rel_bspwm() {
    bspc wm -r > /dev/null
}

rel_polybar() {
    pkill -USR1 -x polybar > /dev/null
}

rel_if_alive() {
    if pgrep "$*" > /dev/null; then
        rel_"$*"
    fi
}

main() {
    parse_args "$@"
    check_xres
    exec_args

    cleanup
    exit 0
}

main "$@"
